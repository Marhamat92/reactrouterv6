{"ast":null,"code":"var _jsxFileName = \"/home/marhamat/Desktop/reactrouterv6/src/routes.js\";\n//!in this file we will define all the routes for our application with their respective components and layouts,and also we will define the nested routes here as children of the parent routes\nimport HomePage from './pages/HomePage/HomePage';\nimport ContactPage from './pages/ContactPage/ContactPage';\nimport Categories from './pages/BlogPage/Categories';\nimport Post from './pages/BlogPage/Post';\nimport Blog from './pages/BlogPage/Blog';\nimport ProfilePage from './pages/Profile/ProfilePage';\nimport BlogLayout from './pages/BlogPage';\nimport ErrorPage from './pages/BlogPage/ErrorPage'; //! we use this under blog pages to show error page\nimport GeneralErrorPage from './pages/GeneralErrorPage'; //!we use this to show error page for all pages\nimport PrivateRoute from './components/PrivateRoute';\nimport AuthLayout from './pages/Auth/AuthLayout';\nimport LoginPage from './pages/Auth/LoginPage';\nimport GeneralLayout from './pages/GeneralLayout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst routes = [{\n  path: '/',\n  element: /*#__PURE__*/_jsxDEV(GeneralLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 14\n  }, this),\n  children: [{\n    index: true,\n    element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 31\n    }, this)\n  }, {\n    path: 'contact',\n    element: /*#__PURE__*/_jsxDEV(ContactPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 35\n    }, this)\n  }, {\n    path: 'blog',\n    element: /*#__PURE__*/_jsxDEV(BlogLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 32\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(Blog, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 35\n      }, this)\n    }, {\n      path: 'categories',\n      element: /*#__PURE__*/_jsxDEV(Categories, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 42\n      }, this)\n    }, {\n      path: 'post/:url/:id',\n      element: /*#__PURE__*/_jsxDEV(Post, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 45\n      }, this)\n    }, {\n      path: '*',\n      element: /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 33\n      }, this)\n    }]\n  }, {\n    path: 'profile',\n    element: /*#__PURE__*/_jsxDEV(ProfilePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 18\n    }, this),\n    auth: true\n  }, {\n    path: '*',\n    element: /*#__PURE__*/_jsxDEV(GeneralErrorPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 18\n    }, this)\n  }]\n}, {\n  path: '/auth',\n  element: /*#__PURE__*/_jsxDEV(AuthLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 14\n  }, this),\n  children: [{\n    index: true,\n    element: /*#__PURE__*/_jsxDEV(LoginPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 31\n    }, this)\n  }, {\n    path: 'login',\n    element: /*#__PURE__*/_jsxDEV(LoginPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 33\n    }, this)\n  }]\n}, {\n  path: '*',\n  element: /*#__PURE__*/_jsxDEV(GeneralErrorPage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 14\n  }, this)\n}];\n\n//we used this to map the routes and check if the route is private or not\n//if the route is private then we will wrap the route with PrivateRoute component\n//if the route is not private then we will return the route as it is\n//same we do for nested routes, children as well\n\nconst authMap = routes => routes.map(route => {\n  if (route !== null && route !== void 0 && route.auth) {\n    return /*#__PURE__*/_jsxDEV(PrivateRoute, {\n      children: route.element\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }, this);\n  }\n  if (route !== null && route !== void 0 && route.children) {\n    return route.children = authMap(route.children);\n  }\n  return route;\n});\nexport default authMap(routes);","map":{"version":3,"names":["HomePage","ContactPage","Categories","Post","Blog","ProfilePage","BlogLayout","ErrorPage","GeneralErrorPage","PrivateRoute","AuthLayout","LoginPage","GeneralLayout","routes","path","element","children","index","auth","authMap","map","route"],"sources":["/home/marhamat/Desktop/reactrouterv6/src/routes.js"],"sourcesContent":["//!in this file we will define all the routes for our application with their respective components and layouts,and also we will define the nested routes here as children of the parent routes\nimport HomePage from './pages/HomePage/HomePage';\nimport ContactPage from './pages/ContactPage/ContactPage';\nimport Categories from './pages/BlogPage/Categories';\nimport Post from './pages/BlogPage/Post';\nimport Blog from './pages/BlogPage/Blog';\nimport ProfilePage from './pages/Profile/ProfilePage';\nimport BlogLayout from './pages/BlogPage';\nimport ErrorPage from './pages/BlogPage/ErrorPage'; //! we use this under blog pages to show error page\nimport GeneralErrorPage from './pages/GeneralErrorPage'; //!we use this to show error page for all pages\nimport PrivateRoute from './components/PrivateRoute';\nimport AuthLayout from './pages/Auth/AuthLayout';\nimport LoginPage from './pages/Auth/LoginPage';\nimport GeneralLayout from './pages/GeneralLayout';\n\n\nconst routes = [\n  {\n    path: '/',\n    element: <GeneralLayout />,\n\n    children: [\n      { index: true, element: <HomePage /> },\n      { path: 'contact', element: <ContactPage /> },\n      {\n        path: 'blog', element: <BlogLayout />,\n\n        children: [\n          { index: true, element: <Blog /> },\n          { path: 'categories', element: <Categories /> },\n          { path: 'post/:url/:id', element: <Post /> },\n          { path: '*', element: <ErrorPage /> },\n        ]\n      },\n      {\n        path: 'profile',\n        element: <ProfilePage />,\n        auth: true\n      },\n      {\n        path: '*',\n        element: <GeneralErrorPage />\n      }\n    ],\n  },\n  {\n    path: '/auth',\n    element: <AuthLayout />,\n    children: [\n      { index: true, element: <LoginPage /> },\n      { path: 'login', element: <LoginPage /> },\n    ]\n  },\n  {\n    path: '*',\n    element: <GeneralErrorPage />\n  }\n];\n\n//we used this to map the routes and check if the route is private or not\n//if the route is private then we will wrap the route with PrivateRoute component\n//if the route is not private then we will return the route as it is\n//same we do for nested routes, children as well\n\nconst authMap = routes => routes.map(route => {\n  if (route?.auth) {\n    return <PrivateRoute>\n      {route.element}\n    </PrivateRoute>\n  }\n  if (route?.children) {\n    return route.children = authMap(route.children)\n  }\n  return route\n\n})\n\n\n\nexport default authMap(routes);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}